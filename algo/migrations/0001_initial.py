# Generated by Django 4.2.16 on 2025-08-22 22:16

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AdminSystemConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('strategy_processor_batch_size', models.PositiveIntegerField(default=1, help_text='Batch size for strategy processor.')),
                ('strategy_depth_orderbook', models.PositiveIntegerField(default=10, help_text='Depth of the order book for strategies.')),
                ('wallex_tether_order_amount', models.PositiveIntegerField(default=20, help_text='Tether amount for ordering in Wallex.')),
                ('put_same_order_base_in_every_order', models.BooleanField(default=True, help_text='Whether to put the same order base in every order.')),
                ('kill_switch', models.BooleanField(default=False, help_text='Global kill switch to stop all strategies and tasks of system.')),
                ('desired_balance_asset_in_usdt_tmn_market', models.CharField(choices=[('USDT', 'USDT'), ('TMN', 'TMN')], default='USDT', help_text='Desired balance asset in USDT/TMN market.', max_length=5)),
            ],
            options={
                'verbose_name': 'Admin System Config',
                'verbose_name_plural': 'Admin System Configs',
            },
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.CharField(choices=[('Wallex', 'WALLEX'), ('Nobitex', 'NOBITEX')], default='Wallex', help_text='The provider type for this client.', max_length=50)),
                ('name', models.CharField(help_text='The asset name (e.g., BTC, USDT).', max_length=20, unique=True)),
            ],
            options={
                'verbose_name': 'Asset',
                'verbose_name_plural': 'Assets',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Deal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client_deal_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the deal.', unique=True)),
                ('strategy_name', models.CharField(help_text='The name of the strategy that generated this deal.', max_length=100)),
                ('provider_name', models.CharField(help_text='The name of the provider (e.g., WALLEX).', max_length=50)),
                ('market_symbol', models.CharField(help_text='The trading pair symbol (e.g., BTCUSDT).', max_length=20)),
                ('side', models.CharField(choices=[('BUY', 'BUY'), ('SELL', 'SELL')], help_text='The side of the deal (BUY or SELL).', max_length=5)),
                ('price', models.DecimalField(blank=True, decimal_places=8, help_text='The price at which the deal was initiated.', max_digits=20, null=True)),
                ('quantity', models.DecimalField(blank=True, decimal_places=8, help_text='The quantity of the base asset to be traded.', max_digits=20, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the deal is currently active and should be processed.')),
                ('status', models.CharField(choices=[(0, 'Started'), (1, 'Running'), (2, 'Updated'), (3, 'Stopped'), (4, 'Not Ordering')], default=0, help_text='The current state of the deal lifecycle.', max_length=20)),
                ('is_processed', models.BooleanField(default=False, help_text='Indicates if a related order has been placed for this deal.')),
                ('processed_side', models.CharField(choices=[('BUY', 'BUY'), ('SELL', 'SELL'), ('BUY_AND_SELL', 'BUY_AND_SELL'), ('NONE', 'NONE')], default='NONE', max_length=35)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Market',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.CharField(choices=[('Wallex', 'WALLEX'), ('Nobitex', 'NOBITEX')], default='Wallex', help_text='The provider type for this client.', max_length=50)),
                ('symbol', models.CharField(default='Unknown', help_text="The trading pair symbol (e.g., 'BTCUSDT').", max_length=50, unique=True)),
                ('base_asset', models.CharField(blank=True, help_text="The base asset of the market (e.g., 'BTC').", max_length=50, null=True)),
                ('base_asset_precision', models.IntegerField(blank=True, help_text='The decimal precision of the base asset.', null=True)),
                ('quote_asset', models.CharField(blank=True, help_text="The quote asset of the market (e.g., 'USDT').", max_length=50, null=True)),
                ('quote_precision', models.IntegerField(blank=True, help_text='The decimal precision of the quote asset.', null=True)),
                ('fa_name', models.CharField(blank=True, help_text='The Persian name of the market.', max_length=255, null=True)),
                ('fa_base_asset', models.CharField(blank=True, help_text='The Persian name of the base asset.', max_length=255, null=True)),
                ('fa_quote_asset', models.CharField(blank=True, help_text='The Persian name of the quote asset.', max_length=255, null=True)),
                ('step_size', models.IntegerField(default=1, help_text='The step size for volume adjustments.')),
                ('tick_size', models.IntegerField(default=1, help_text='The step size for price adjustments.')),
                ('min_qty', models.FloatField(blank=True, help_text='The minimum quantity for trades.', null=True)),
                ('min_notional', models.FloatField(blank=True, help_text='The minimum trade amount in the quote asset.', null=True)),
                ('timestamp_created_at', models.DateTimeField(blank=True, help_text='The timestamp when the market was created.', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StoreClient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name', models.CharField(default=None, help_text='The name of the client.', max_length=100, unique=True)),
                ('api_key', models.CharField(help_text='The API key for this client.', max_length=150, unique=True)),
                ('api_secret', models.CharField(blank=True, help_text='The API secret for this client.', max_length=150, null=True)),
                ('user_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the client, automatically generated.', unique=True)),
                ('title', models.CharField(blank=True, help_text='An optional descriptive title for this client.', max_length=250, null=True)),
                ('provider', models.CharField(choices=[('Wallex', 'WALLEX'), ('Nobitex', 'NOBITEX')], default='Wallex', help_text='The provider type for this client.', max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StrategyConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('strategy', models.CharField(choices=[('StrategyMacdEmaCross', 'StrategyMacdEmaCross')], default='StrategyMacdEmaCross', max_length=255)),
                ('need_historical_data', models.BooleanField(default=True)),
                ('strategy_configs', models.JSONField(blank=True, default=dict)),
                ('sensitivity_percent', models.FloatField(default=0.01, help_text='A percentage of sensitivity for an order, must be between 0 (exclusive) and 1 (inclusive).', validators=[django.core.validators.MinValueValidator(1e-06, message='Value must be greater than 0.'), django.core.validators.MaxValueValidator(1.0, message='Value must not exceed 1.')])),
                ('initial_history_period_days', models.IntegerField(default=30)),
                ('resolution', models.CharField(choices=[('1', '1 Minute'), ('5', '5 Minutes'), ('15', '15 Minutes'), ('30', '30 Minutes'), ('60', '1 Hour'), ('240', '4 Hours'), ('D', '1 Day'), ('W', '1 Week'), ('MO', '1 Month')], default='D', help_text='The time resolution for historical data (e.g., 1 minute, 1 day).', max_length=5)),
                ('state', models.PositiveSmallIntegerField(choices=[(0, 'Started'), (1, 'Running'), (2, 'Updated'), (3, 'Stopped'), (4, 'Not Ordering')], default=0)),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the strategy configuration is active.')),
                ('market', models.ForeignKey(blank=True, help_text='The market associated with this strategy.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='strategy_configs', to='algo.market')),
                ('store_client', models.ForeignKey(default=None, help_text='The store client associated with this strategy.', on_delete=django.db.models.deletion.CASCADE, to='algo.storeclient')),
            ],
            options={
                'verbose_name': 'Strategy Configuration',
                'verbose_name_plural': 'Strategy Configurations',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('symbol', models.CharField(help_text='The trading pair symbol (e.g., BTCUSDT).', max_length=20)),
                ('type', models.CharField(choices=[('LIMIT', 'LIMIT'), ('MARKET', 'MARKET')], help_text='The type of order (e.g., LIMIT or MARKET).', max_length=10)),
                ('side', models.CharField(choices=[('BUY', 'BUY'), ('SELL', 'SELL')], help_text='The side of the order (BUY or SELL).', max_length=5)),
                ('price', models.DecimalField(blank=True, decimal_places=8, help_text='The price at which the order should be executed.', max_digits=20, null=True)),
                ('quantity', models.DecimalField(blank=True, decimal_places=8, help_text='The quantity of the asset to be traded.', max_digits=20, null=True)),
                ('orig_qty', models.DecimalField(blank=True, decimal_places=8, help_text='The original quantity as a string.', max_digits=20, null=True)),
                ('orig_sum', models.DecimalField(blank=True, decimal_places=8, help_text='The original sum as a string.', max_digits=20, null=True)),
                ('executed_price', models.DecimalField(blank=True, decimal_places=8, help_text='The executed price as a string.', max_digits=20, null=True)),
                ('executed_qty', models.DecimalField(blank=True, decimal_places=8, help_text='The executed quantity as a string.', max_digits=20, null=True)),
                ('executed_sum', models.DecimalField(blank=True, decimal_places=8, help_text='The executed sum as a string.', max_digits=20, null=True)),
                ('executed_percent', models.IntegerField(blank=True, help_text='The percentage of the order that has been executed.', null=True)),
                ('status', models.CharField(choices=[('NEW', 'New'), ('FILLED', 'Filled'), ('PARTIALLY_FILLED', 'Partially Filled'), ('CANCELED', 'Canceled')], default='NEW', help_text='The status of the order (e.g., NEW, FILLED, CANCELED).', max_length=20)),
                ('active', models.BooleanField(blank=True, help_text='Whether the order is active.', null=True)),
                ('client_order_id', models.CharField(blank=True, help_text='The client order ID.', max_length=100, null=True, unique=True)),
                ('timestamp_created_at', models.CharField(blank=True, help_text='The timestamp when the order was created.', max_length=100, null=True)),
                ('should_cancel', models.BooleanField(default=False, help_text='Flag to indicate if the order should be canceled.')),
                ('deal', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to='algo.deal')),
                ('store_client', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to='algo.storeclient')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AccountBalance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('total_balance', models.DecimalField(decimal_places=6, default=0, help_text='The total balance (available + locked).', max_digits=20)),
                ('unbalance_threshold', models.IntegerField(default=1, help_text='Percentage threshold (1-99%) for balance alerts.', validators=[django.core.validators.MinValueValidator(1, message='Value must be greater than 0.'), django.core.validators.MaxValueValidator(99, message='Value must be less than 100.')])),
                ('asset', models.ForeignKey(help_text='The asset name (e.g., BTC, USDT).', on_delete=django.db.models.deletion.CASCADE, related_name='balances', to='algo.asset')),
                ('store_client', models.ForeignKey(help_text='The StoreClient associated with this balance.', on_delete=django.db.models.deletion.CASCADE, related_name='balances', to='algo.storeclient')),
            ],
        ),
        migrations.AddConstraint(
            model_name='accountbalance',
            constraint=models.UniqueConstraint(fields=('store_client', 'asset'), name='unique_store_client_asset'),
        ),
    ]
