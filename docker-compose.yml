name: algo_trade
networks:
  algo_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:

services:

  # PostgreSQL database
  postgres:
    image: postgres:latest
    container_name: postgres_db
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: your_password
      POSTGRES_DB: algo_db
    networks:
      - algo_network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h localhost || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery broker and caching
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    networks:
      - algo_network
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Django application
  django:
    build: .
    container_name: django_app
    entrypoint: [ "/entrypoint.sh" ]
    command: [ "gunicorn", "--workers=4", "--bind", "0.0.0.0:8000", "algo_trade.wsgi:application" ]
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: your_password
      DB_DATABASE: algo_db
      REDIS_HOST: redis
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - algo_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Celery worker
  celery_worker:
    build: .
    container_name: celery_worker
    entrypoint: [ "/entrypoint.sh" ]
    command: [ "celery", "-A", "algo_trade", "worker", "--loglevel=info" ]
    volumes:
      - .:/app
    depends_on:
      - redis
      - django
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    networks:
      - algo_network
    healthcheck:
      test: ["CMD-SHELL", "celery -A algo_trade inspect ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Celery Beat
  celery_beat:
    build: .
    container_name: celery_beat
    entrypoint: [ "/entrypoint.sh" ]
    command: [ "celery", "-A", "algo_trade", "beat", "--loglevel=info" ]
    volumes:
      - .:/app
    depends_on:
      - redis
      - django

    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    networks:
      - algo_network

  # Flower for monitoring Celery tasks
  flower:
    image: mher/flower:latest
    container_name: flower
    command: celery --broker=redis://redis:6379/0 flower --port=5555
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - django
      - celery_worker
    networks:
      - algo_network