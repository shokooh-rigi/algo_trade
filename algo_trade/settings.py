"""
Django settings for algo_trade project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

from dotenv import load_dotenv

import logging
import sentry_sdk
from sentry_sdk.integrations.celery import CeleryIntegration
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import LoggingIntegration
from sentry_sdk.integrations.redis import RedisIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-a8dt6pdb#x9n6ypw&iez#^wa)*#_n!hu+$oqihgcv82i+fv$@&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'algo.apps.AlgoConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'algo_trade.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'algo_trade.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DATABASE_NAME', 'algo_db'),
        'USER': os.getenv('DATABASE_USER', 'postgres'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD', 'your_password'),
        'HOST': os.getenv('DATABASE_HOST', 'localhost'),
        'PORT': os.getenv('DATABASE_PORT', 5432),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# urls wallex
WALLEX_BASE_URL : str = os.getenv('WALLEX_BASE_URL', 'https://api.wallex.ir/')
WALLEX_ORDER_BOOK_PATH : str = os.getenv('WALLEX_ORDER_BOOK_PATH', 'v2/depth/all')
WALLEX_ORDER_BOOK_PATH_BY_SYMBOL : str = os.getenv('WALLEX_ORDER_BOOK_PATH_BY_SYMBOL', 'v1/depth?symbol=')
WALLEX_MARKET_PATH : str = os.getenv('WALLEX_MARKET_PATH', 'v1/markets')
WALLEX_ASSET_PATH : str = os.getenv('WALLEX_ASSET_PATH', 'v1/currencies')
WALLEX_ORDER_CREATE_PATH : str = os.getenv('WALLEX_ORDER_CREATE_PATH', 'v1/account/orders')
WALLEX_ACTIVE_ORDERS_PATH : str = os.getenv('WALLEX_ACTIVE_ORDERS_PATH', 'v1/account/openOrders')
WALLEX_ORDER_INFO_PATH : str = os.getenv('WALLEX_ORDER_INFO_PATH', 'v1/account/orders/')
WALLEX_CANCEL_ORDER_PATH : str = os.getenv('WALLEX_CANCEL_ORDER_PATH', 'v1/account/orders')
WALLEX_GET_BALANCES_PATH : str = os.getenv('WALLEX_GET_BALANCES_PATH', 'v1/account/balances/')
WALLEX_OHLCV_HISTORY_PATH : str = os.getenv('WALLEX_OHLCV_HISTORY_PATH',"/v1/market/ohlcv")

#url nobitex
NOBITEX_BASE_URL : str = os.getenv('NOBITEX_BASE_URL', 'https://api.nobitex.ir/')
NOBITEX_ORDER_BOOK_PATH : str = os.getenv('NOBITEX_ORDER_BOOK_PATH', 'v2/depth/all')
NOBITEX_ORDER_BOOK_PATH_BY_SYMBOL : str = os.getenv('NOBITEX_ORDER_BOOK_PATH_BY_SYMBOL', 'v1/depth')
NOBITEX_MARKET_PATH : str = os.getenv('NOBITEX_MARKET_PATH', 'v1/markets')
NOBITEX_ASSET_PATH : str = os.getenv('NOBITEX_ASSET_PATH', 'v1/currencies')

NOBITEX_ORDER_CREATE_PATH : str = os.getenv('NOBITEX_ORDER_CREATE_PATH', 'market/orders/add') # This is a POST endpoint, often a v2 path.
NOBITEX_ACTIVE_ORDERS_PATH : str = os.getenv('NOBITEX_ACTIVE_ORDERS_PATH', 'v1/account/openOrders') # This is a GET endpoint.
NOBITEX_ORDER_INFO_PATH : str = os.getenv('NOBITEX_ORDER_INFO_PATH', 'v1/market/orders/status') # This is a POST endpoint.
NOBITEX_CANCEL_ORDER_PATH : str = os.getenv('NOBITEX_CANCEL_ORDER_PATH', 'v1/market/orders/update-status') # This is a POST endpoint.
NOBITEX_GET_BALANCES_PATH : str = os.getenv('NOBITEX_GET_BALANCES_PATH', 'v2/users/wallets/balance') # This is a POST endpoint.
NOBITEX_OHLCV_HISTORY_PATH : str = os.getenv('NOBITEX_OHLCV_HISTORY_PATH', "market/udf/history")

#log prefix
STRATEGY_PROCESSOR_LOG_PREFIX = 'PROCESSOR => '
DEAL_PROCESSING_LOG_PREFIX = 'DEAL_PROCESSOR => '
INQUIRY_ORDER_LOG_PREFIX = 'INQUIRY => '
BALANCE_ORDER_LOG_PREFIX = 'BALANCE => '
LOG_CANCEL_PREFIX = 'CANCEL => '
ASSET_LOG_PREFIX = 'ASSET => '
MARKET_DATA_LOG_PREFIX = 'MARKET =>'


# Celery settings
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://redis:6379/0")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", "redis://redis:6379/0")
CELERY_TASK_RESULT_EXPIRES = int(os.getenv("CELERY_TASK_RESULT_EXPIRES", 60))
CELERY_WORKER_LOG_FORMAT = "CELERY-LOG =>  %(asctime)s [%(levelname)s] %(name)s: %(message)s"
CELERY_WORKER_TASK_LOG_FORMAT = "CELERY-LOG =>  %(asctime)s [%(levelname)s] %(name)s: %(message)s"
CELERY_BEAT_LOG_FORMAT = "CELERY-LOG =>  %(asctime)s [%(levelname)s] %(name)s: %(message)s"
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
CELERY_WORKER_SEND_TASK_EVENTS = True
CELERY_TASK_SEND_SENT_EVENT = True

#redis config
REDIS_HOST = os.getenv('REDIS_HOST', 'redis')
REDIS_PORT : int = int(os.getenv('REDIS_PORT', '6379'))
REDIS_DB : int = int(os.getenv('REDIS_DB', 0))


#Logging and Sentry settings
LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "root": {"level": "INFO", "handlers": ["console"]},
    "loggers": {
        "django.db.backends": {
            "level": "ERROR",
            "handlers": ["console"],
            "propagate": False,
        },
        # Errors logged by the SDK itself
        "sentry_sdk": {"level": "ERROR", "handlers": ["console"], "propagate": False},
        "django.security.DisallowedHost": {
            "level": "ERROR",
            "handlers": ["console"],
            "propagate": False,
        },
    },
}
SENTRY_DSN = os.getenv("SENTRY_DSN", "")
SENTRY_LOG_LEVEL = int(os.getenv("DJANGO_SENTRY_LOG_LEVEL", logging.INFO))

sentry_logging = LoggingIntegration(
    level=SENTRY_LOG_LEVEL,  # Capture info and above as breadcrumbs
    event_level=logging.ERROR,  # Send errors as events
)

integrations = [
    sentry_logging,
    DjangoIntegration(),
    CeleryIntegration(),
    RedisIntegration(),
]

SENTRY_ENVIRONMENT = os.getenv("SENTRY_ENVIRONMENT", "staging")

sentry_sdk.init(
    dsn=SENTRY_DSN,
    integrations=integrations,
    environment=os.getenv("SENTRY_ENVIRONMENT", default="production"),
    traces_sample_rate=float(os.getenv("SENTRY_TRACES_SAMPLE_RATE", default=1.0)),
    profiles_sample_rate=float(os.getenv("SENTRY_PROFILES_SAMPLE_RATE", default=1.0)),
)
